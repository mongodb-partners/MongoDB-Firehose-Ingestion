AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: mongodb-atlas-kinesis-data-firehose-api
    Description: >
      This is a SAM project for a Python MongoDB Kinesis Data Firehose API.
    Author: MongoDb
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: readme.md
    Labels: ['Mongodb']
    HomePageUrl: https://github.com/mongodb-partners/MongoDB-Kinesis-Transformation
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/mongodb-partners/MongoDB-Kinesis-Transformation
Parameters:

  ConnectionString:
    Type: String
    Description: >
      The connection string for MongoDB Atlas.
    Default: ""

  DBName:
    Type: String
    Description: >
      Mongodb database name
    Default: "test"

  CollectionName:
    Type: String
    Description: >
      Mongodb collection name, where you want to save data
    Default: "test"


Resources:
  AuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-authorizer-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ApiGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:GetApiKey
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::/apikeys/*
        - PolicyName: LambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

  AuthorizerLambda:
      Type: AWS::Serverless::Function
      Properties:
        Role: !GetAtt AuthorizerLambdaRole.Arn
        Runtime: python3.10
        Timeout: 15
        CodeUri: ./authorizer/
        Handler: app.lambda_handler
        Environment:
          Variables:
            API_KEY_ID: "DEFAULT"

  CRUDLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Timeout: 15
      CodeUri: ./lambda/
      Handler: app.lambda_handler
      Environment:
        Variables:
          ATLAS_CONNECTION_STRING: !Ref ConnectionString
          COLLECTION_NAME: !Ref CollectionName
          DB_NAME: !Ref DBName
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRest
            Path: /
            Method: ANY
            Auth:
              ApiKeyRequired: true

  ServerlessRest:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Quota:
            Limit: 500
            Period: MONTH
          Throttle:
            BurstLimit: 100
            RateLimit: 50
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthorizerLambda.Arn  # Reference to your Lambda function
            Identity:
              Headers:
                - X-Amz-Firehose-Access-Key  # The header containing the token
            AuthorizerResultTtlInSeconds: 300  # Cache authorization results for 5 minutes
            FunctionPayloadType: REQUEST       # Can be TOKEN or REQUEST
        DefaultAuthorizer: LambdaRequestAuthorizer  # Makes this the default authorizer for all routes



Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRest}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKeyValue:
    Description: API Key
    Value: !Sub "${ServerlessRestApiKey}"
  ApiKeyUrl:
    Description: "Key URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apigateway/main/api-keys/${ServerlessRestApiKey}?api=unselected&region=${AWS::Region}"
  LambdaAuthorizer:
    Description: "Authorizer Lambda"
    Value: !Sub "${AuthorizerLambda}"
  ServerlessRestAPI:
    Description: "Serverless Rest API"
    Value: !Sub "${ServerlessRest}"
  ApiResourceId:
    Description: "API Gateway Resource ID"
    Value: !GetAtt ServerlessRest.RootResourceId   # For the root resource
  AuthorizerLambdaRoleName:
    Description: "Name of the IAM role created for the Authorizer Lambda"
    Value: !Ref AuthorizerLambdaRole